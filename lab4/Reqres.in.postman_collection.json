{
	"info": {
		"_postman_id": "c559d2c7-91f0-4411-8fa2-22ebbe6e1188",
		"name": "Reqres.in",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39458179"
	},
	"item": [
		{
			"name": "List Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct page name\", function () {\r",
							"    pm.expect(jsonData.page).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct entries per page\", function () {\r",
							"    pm.expect(jsonData.per_page).to.eql(6);\r",
							"});\r",
							"\r",
							"pm.test(\"Total number of entries\", function () {\r",
							"    pm.expect(jsonData.total).to.eql(12);\r",
							"});\r",
							"\r",
							"pm.test(\"Total pages\", function () {\r",
							"    pm.expect(jsonData.total_pages).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct JSON response\",function(){\r",
							"        pm.expect(jsonData.page).to.eql(2);\r",
							"        pm.expect(jsonData.per_page).to.eql(6);\r",
							"        pm.expect(jsonData.total).to.eql(12);\r",
							"        pm.expect(jsonData.total_pages).to.eql(2);\r",
							"\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/users?page=2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List A Single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate the response schema for the user object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data.id).to.be.a('number');\r",
							"    pm.expect(responseData.data.first_name).to.be.a('string');\r",
							"    pm.expect(responseData.data.email).to.match(/^.+@.+\\..+$/);\r",
							"    pm.expect(responseData.data.last_name).to.be.a('string');\r",
							"    pm.expect(responseData.data.avatar).to.be.a('string');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/users/2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "List a user not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response data is empty\", function () {\r",
							"     pm.expect(pm.response.json()).to.be.an('object').that.is.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/users/23",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "List all resources",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Parse the JSON response\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Test for the presence and correctness of pagination metadata\r",
							"pm.test(\"Pagination metadata is correct\", function () {\r",
							"    pm.expect(jsonData.page).to.equal(1, \"Page number should be 1\");\r",
							"    pm.expect(jsonData.per_page).to.equal(6, \"Items per page should be 6\");\r",
							"    pm.expect(jsonData.total).to.equal(12, \"Total items should be 12\");\r",
							"    pm.expect(jsonData.total_pages).to.equal(2, \"Total pages should be 2\");\r",
							"});\r",
							"\r",
							"// Test for the presence of the 'data' array\r",
							"pm.test(\"Response contains a 'data' array\", function () {\r",
							"    pm.expect(jsonData.data).to.be.an(\"array\", \"'data' should be an array\");\r",
							"});\r",
							"\r",
							"// Test for the number of items in the 'data' array\r",
							"pm.test(\"Data array contains 6 items\", function () {\r",
							"    pm.expect(jsonData.data.length).to.equal(6, \"The 'data' array should contain 6 items\");\r",
							"});\r",
							"\r",
							"// Test for the structure of each item in the 'data' array\r",
							"jsonData.data.forEach((item, index) => {\r",
							"    pm.test(`Item ${index + 1} has the correct structure`, function () {\r",
							"        pm.expect(item.id).to.be.a(\"number\", \"Each item should have an 'id' field\");\r",
							"        pm.expect(item.name).to.be.a(\"string\", \"Each item should have a 'name' field\");\r",
							"        pm.expect(item.year).to.be.a(\"number\", \"Each item should have a 'year' field\");\r",
							"        pm.expect(item.color).to.be.a(\"string\", \"Each item should have a 'color' field\");\r",
							"        pm.expect(item.pantone_value).to.be.a(\"string\", \"Each item should have a 'pantone_value' field\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test for the presence and correctness of the 'support' object\r",
							"pm.test(\"Response contains a 'support' object\", function () {\r",
							"    pm.expect(jsonData.support).to.be.an(\"object\", \"'support' should be an object\");\r",
							"    pm.expect(jsonData.support.url).to.be.a(\"string\", \"'support' should have a 'url' field\");\r",
							"    pm.expect(jsonData.support.text).to.be.a(\"string\", \"'support' should have a 'text' field\");\r",
							"});\r",
							"\r",
							"// Optional: Test for specific values in the 'data' array (e.g., first item)\r",
							"pm.test(\"First item in 'data' has correct values\", function () {\r",
							"    let firstItem = jsonData.data[0];\r",
							"    pm.expect(firstItem.id).to.equal(1, \"First item ID should be 1\");\r",
							"    pm.expect(firstItem.name).to.equal(\"cerulean\", \"First item name should be 'cerulean'\");\r",
							"    pm.expect(firstItem.year).to.equal(2000, \"First item year should be 2000\");\r",
							"    pm.expect(firstItem.color).to.equal(\"#98B2D1\", \"First item color should be '#98B2D1'\");\r",
							"    pm.expect(firstItem.pantone_value).to.equal(\"15-4020\", \"First item pantone_value should be '15-4020'\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/unknown",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"unknown"
					]
				}
			},
			"response": []
		},
		{
			"name": "List a single resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Ensure the response status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Parse the JSON response\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Test for the presence of the 'data' object\r",
							"pm.test(\"Response contains a 'data' object\", function () {\r",
							"    pm.expect(jsonData.data).to.be.an(\"object\", \"'data' should be an object\");\r",
							"});\r",
							"\r",
							"// Test for the structure and values of the 'data' object\r",
							"pm.test(\"Data object has the correct structure and values\", function () {\r",
							"    pm.expect(jsonData.data.id).to.equal(2, \"'id' should be 2\");\r",
							"    pm.expect(jsonData.data.name).to.equal(\"fuchsia rose\", \"'name' should be 'fuchsia rose'\");\r",
							"    pm.expect(jsonData.data.year).to.equal(2001, \"'year' should be 2001\");\r",
							"    pm.expect(jsonData.data.color).to.equal(\"#C74375\", \"'color' should be '#C74375'\");\r",
							"    pm.expect(jsonData.data.pantone_value).to.equal(\"17-2031\", \"'pantone_value' should be '17-2031'\");\r",
							"});\r",
							"\r",
							"// Test for the presence of the 'support' object\r",
							"pm.test(\"Response contains a 'support' object\", function () {\r",
							"    pm.expect(jsonData.support).to.be.an(\"object\", \"'support' should be an object\");\r",
							"});\r",
							"\r",
							"// Test for the structure and values of the 'support' object\r",
							"pm.test(\"Support object has the correct structure and values\", function () {\r",
							"    pm.expect(jsonData.support.url).to.equal(\"https://contentcaddy.io?utm_source=reqres&utm_medium=json&utm_campaign=referral\", \"'url' should match the expected value\");\r",
							"    pm.expect(jsonData.support.text).to.equal(\"Tired of writing endless social media content? Let Content Caddy generate it for you.\", \"'text' should match the expected value\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/unknown/2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"unknown",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "List a resource not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/unknown/23",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"unknown",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/users/2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user (patch)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/users/2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/users/2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register a new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/register/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"register",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Unsuccessful register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"sydney@fife\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/register/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"register",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/login/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/login/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Delayed Response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/users?delay=3",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "3"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Response time is less than 200ms\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
					"});"
				]
			}
		}
	]
}